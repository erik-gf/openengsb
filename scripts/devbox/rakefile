#
# Copyright 2010, OpenEngSB Division, Vienna University of Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'rubygems'
require 'chef'
require 'json'
require 'pathname'
require 'vagrant'

TOPDIR = File.expand_path(File.dirname(__FILE__))

COMPANY_NAME = 'OpenEngSB Division, Vienna University of Technology'
NEW_COOKBOOK_LICENSE = :apachev2
SSL_EMAIL_ADDRESS = ''

load 'chef/tasks/chef_repo.rake'

task :shutdown do
  env = Vagrant::Environment.load!
  env.require_persisted_vm
  env.ssh.execute do |ssh|
    ssh.exec('sudo shutdown -h now')
  end
end

desc 'Run a cookbook in the vagrant vm'
task :remote_cookbook, :cookbook do |t, args|
  h = {'instance_role' => 'vagrant', 'run_list' => ["recipe[#{args.cookbook}]"]}
  tmp = write_chef_json_tmp(h)
  env = Vagrant::Environment.load!
  env.require_persisted_vm
  env.ssh.execute do |ssh|
    ssh.exec("(cd /vagrant; sudo chef-solo -c solo.rb -j #{Pathname.new(tmp.path).basename})")
  end
  tmp.close
end

def write_chef_json_tmp(hash)
  f = Tempfile.new('.tmp', TOPDIR)
  tf = File.new(f.path, 'w')
  tf.puts hash.to_json
  tf.close
  f
end

def write_chef_config_tmp
  f = Tempfile.new('.tmp', TOPDIR)
  tf = File.new(f.path, 'w')
  p = Pathname.new('.').expand_path
  tf.puts "file_cache_path \"#{p}\""
  tf.puts "cookbook_path \"#{p.join('cookbooks')}\""
  tf.puts "role_path []"
  tf.puts "log_level :info"
  tf.close
  f
end

desc 'Do a local install of needed services'
task :local_install, :install_path do |t, args|
  tp = Pathname.new('/var/chef')
  if !(tp.exist? and tp.readable? and tp.writable? and tp.executable?)
    system("sudo mkdir -p #{tp}; sudo chmod 777 #{tp}")
  end
  p = Pathname.new(args.install_path).expand_path
  p.mkpath
  h = { 'instance_role' => 'vagrant',
        'run_list' => ["recipe[local_install]"],
        'exist' => {'install_path' => p.join('exist')},
        'guvnor' => {'install_path' => p.join('guvnor')},
        'servicemix' => {'install_path' => p.join('servicemix')} }
  jsontmp = write_chef_json_tmp(h)
  configtmp = write_chef_config_tmp
  system("chef-solo -c #{configtmp.path} -j #{jsontmp.path}")
  jsontmp.close
  configtmp.close
end
